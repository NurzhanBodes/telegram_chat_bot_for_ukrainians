import time

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

from selenium import webdriver

import border_cross
import first_aid
import huhelp
import mental

#import googlemaps
#rom GoogleAPI import

TOKEN='5233323168:AAEL5OddXII7gFQdlP1RxAAx5Xsi5Y11FOM'
API_KEY='AIzaSyD6R4OmyAdkl-eoR8de9hyJBLILzRx54KA'


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

ukrainian = KeyboardButton("Ukrainianüá∫üá¶")
english = KeyboardButton("Englishüá¨üáß")

language_buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(ukrainian).add(english)


back_region = KeyboardButton("Change region")
back_region_ua=KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ–æ–Ω")
back_help=KeyboardButton("Back to services")

second_english_ukraine=KeyboardButton("I'm in Ukraine nowüá∫üá¶")
second_english_eu=KeyboardButton("I'm refugee in EUüá™üá∫")


first_english = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(second_english_ukraine).add(second_english_eu)

second_ua_ukraine=KeyboardButton("–ó–∞—Ä–∞–∑ –≤ –£–∫—Ä–∞—ó–Ω—ñ üá∫üá¶")
second_ua_eu=KeyboardButton("–ë—ñ–∂–µ–Ω–µ—Ü—å –≤ –Ñ–° üá™üá∫")
first_ua=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(second_ua_ukraine).add(second_ua_eu)

#HELP IN UKRAINE IN ENGLISH
ukraine_english_map = KeyboardButton("Air raid map")
ukraine_english_medhelp = KeyboardButton("First Aid Help")
ukraine_english_border=KeyboardButton("Border crossings")
ukraine_english_mental=KeyboardButton("Mental Health support")

ukraine_english = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(ukraine_english_medhelp).add(ukraine_english_map).add(ukraine_english_border).add(back_region)


#HELP IN UKRAINE IN UKRAINIAN
ukraine_ua_map = KeyboardButton("–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö –Ω–∞–ª—å–æ—Ç—ñ–≤")
ukraine_ua_medhelp = KeyboardButton("–î–æ–ø–æ–º–æ–≥–∞ –ø–µ—Ä—à–æ—ó –¥–æ–ø–æ–º–æ–≥–∏")
ukraine_ua_border=KeyboardButton("–ü—Ä–∏–∫–æ—Ä–¥–æ–Ω–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏")
ukraine_ua_menthal=KeyboardButton("–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö—ñ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è")
ukraine_ua=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(ukraine_ua_map).add(ukraine_ua_medhelp).add(ukraine_ua_border).add(back_region_ua)


eu_english_hungary=KeyboardButton("Refugee in Hungaryüá≠üá∫")
eu_english_czech=KeyboardButton("Refugee in Czech Republicüá®üáø")
eu_english_poland=KeyboardButton("Refugee in Polandüáµüá±")

eu_english_countries=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(eu_english_hungary).add(eu_english_czech).add(eu_english_poland)

#HELP IN EU IN UKRANIAN
eu_ua_hungary=KeyboardButton("–ë—ñ–∂–µ–Ω–µ—Ü—å –≤ –£–≥–æ—Ä—â–∏–Ω—ñüá≠üá∫")
eu_ua_czech=KeyboardButton("–ë—ñ–∂–µ–Ω–µ—Ü—å —É –ß–µ—Ö—ñ—óüá®üáø")
eu_ua_poland=KeyboardButton("–ë—ñ–∂–µ–Ω–µ—Ü—å —É –ü–æ–ª—å—â—ñüáµüá±")
eu_ua_countries=ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True).add(eu_ua_hungary).add(eu_ua_czech).add(eu_ua_poland)

hu_english_acc=KeyboardButton("Accommodation")
hu_english_sim=KeyboardButton("Phone and SIM")
hu_english_med=KeyboardButton("Medical help")
hu_english_food=KeyboardButton("Food and supply")
hu_english=ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True).add(hu_english_acc).add(hu_english_sim).add(hu_english_med).add(hu_english_food).add(back_region)


hu_ua_acc=KeyboardButton("–ñ–∏—Ç–ª–æ")
hu_ua_sim=KeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω, SIM-–∫–∞—Ä—Ç–∞, WiFi")
hu_ua_med=KeyboardButton("–ú–µ–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞")
hu_ua_food=KeyboardButton("–•–∞—Ä—á—É–≤–∞–Ω–Ω—è")
hu_ua=ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True).add(hu_ua_acc).add(hu_ua_sim).add(hu_ua_med).add(hu_ua_food).add(back_region_ua)




q1n=InlineKeyboardButton(text='No',callback_data='q1n')
q1y=InlineKeyboardButton(text='Yes',callback_data='q1y')
q1=InlineKeyboardMarkup().add(q1n).add(q1y)

lq2n=InlineKeyboardButton(text='No',callback_data='lq2n')
lq2y=InlineKeyboardButton(text='Yes',callback_data='lq2y')
lq2=InlineKeyboardMarkup().add(lq2n).add(lq2y)

location=KeyboardButton(text="Send location",request_location=True)
locationmar=ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True).add(location).add(back_region)

rq2l=InlineKeyboardButton(text='First',callback_data='rq2l')
rq2r=InlineKeyboardButton(text='Second',callback_data='rq2r')
rq2=InlineKeyboardMarkup().add(rq2l).add(rq2r)

rrql=InlineKeyboardButton(text='First',callback_data='rrql')
rrqr=InlineKeyboardButton(text='Second',callback_data='rrqr')
rrq=InlineKeyboardMarkup().add(rrql).add(rrqr)



@dp.message_handler(commands=['start'])
async def choose_language(message: types.Message):
    await message.reply("Please choose your language\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –º–æ–≤—É",reply_markup=language_buttons)



#FIRST MED HELP MENU
@dp.callback_query_handler(text=['tourni','recovery','penetrating','gunshot','eye','burn','amputation'])
async def aid_menu(callback:types.CallbackQuery):
    if(callback.data == 'tourni'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/1.png','rb'))
        await callback.message.answer(text=first_aid.tournitext, reply_markup=ukraine_english)
    elif(callback.data == 'recovery'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/2.png', 'rb'))
        await callback.message.answer(text=first_aid.recovertext, reply_markup=ukraine_english)
    elif (callback.data == 'penetrating'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/3.png', 'rb'))
        await callback.message.answer(text=first_aid.penetratingtext, reply_markup=ukraine_english)
    elif (callback.data == 'gunshot'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/4.png', 'rb'))
        await callback.message.answer(text=first_aid.gunshottext, reply_markup=ukraine_english)
    elif (callback.data == 'eye'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/5.png', 'rb'))
        await callback.message.answer(text=first_aid.eyetext, reply_markup=ukraine_english)
    elif (callback.data == 'burn'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/6.png', 'rb'))
        await callback.message.answer(text=first_aid.burntext, reply_markup=ukraine_english)
    elif (callback.data == 'amputation'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/7.png', 'rb'))
        await callback.message.answer(text=first_aid.amputationtext, reply_markup=ukraine_english)

@dp.callback_query_handler(text=['tourniu','recoveryu','penetratingu','gunshotu','eyeu','burnu','amputationu'])
async def aid_menu_ua(callback:types.CallbackQuery):
    if(callback.data == 'tourniu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/1.png', 'rb'))
        await callback.message.answer(text=first_aid.tournitextu, reply_markup=ukraine_ua)
    elif(callback.data == 'recoveryu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/2.png', 'rb'))
        await callback.message.answer(text=first_aid.recovertextu, reply_markup=ukraine_ua)
    elif (callback.data == 'penetratingu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/3.png', 'rb'))
        await callback.message.answer(text=first_aid.penetratingtextu, reply_markup=ukraine_ua)
    elif (callback.data == 'gunshotu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/4.png', 'rb'))
        await callback.message.answer(text=first_aid.gunshottextu, reply_markup=ukraine_ua)
    elif (callback.data == 'eyeu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/5.png', 'rb'))
        await callback.message.answer(text=first_aid.eyetextu, reply_markup=ukraine_ua)
    elif (callback.data == 'burnu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/6.png', 'rb'))
        await callback.message.answer(text=first_aid.burntextu, reply_markup=ukraine_ua)
    elif (callback.data == 'amputationu'):
        await callback.message.answer_photo(photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/7.png', 'rb'))
        await callback.message.answer(text=first_aid.amputationtextu, reply_markup=ukraine_ua)

#BORDER CROSSING MENU
@dp.callback_query_handler(text=['zahony','barabas','tiszebecs','beregsurany','lonya'])
async def border_menu(callback:types.CallbackQuery):
    if(callback.data == 'zahony'):
        await callback.message.reply(text=border_cross.zahonytext,reply_markup=ukraine_english)
    elif(callback.data == 'barabas'):
        await callback.message.reply(text=border_cross.barabastext,reply_markup=ukraine_english)
    elif (callback.data == 'tiszebecs'):
        await callback.message.reply(text=border_cross.tiszebectext,reply_markup=ukraine_english)
    elif (callback.data == 'beregsurany'):
        await callback.message.reply(text=border_cross.beregsuranytext,reply_markup=ukraine_english)
    elif (callback.data == 'lonya'):
        await callback.message.reply(text=border_cross.lonyatext,reply_markup=ukraine_english)

@dp.callback_query_handler(text=['q1n','q1y','lq2n','lq2y','rq2l','rq2r','rrqr','rrql'])
async def mental_menu(callback:types.CallbackQuery):
    if callback.data=='q1n':
        await callback.message.answer(text=mental.q1l,reply_markup=lq2)
    if callback.data=='lq2y':
        await callback.message.answer(text=mental.q1ly,reply_markup=ukraine_ua)
    if callback.data=='lq2n':
        await callback.message.answer(text=mental.q1ln, reply_markup=locationmar)
    if callback.data=='q1y':
        await callback.message.answer(text=mental.qr,reply_markup=rq2)
    if callback.data=='rq2l':
        await callback.message.answer(text=mental.rql,reply_markup=ukraine_ua)
    if callback.data=='rq2r':
        await callback.message.answer(text=mental.rqr,reply_markup=rrq)
    if callback.data=='rrqr':
        await callback.message.answer(text=mental.rrqr,reply_markup=ukraine_ua)
    if callback.data=='rrql':
        await callback.message.answer(text=mental.rrql,reply_markup=ukraine_ua)


@dp.message_handler()
async def menu(msg: types.Message):
    if msg.text == "Englishüá¨üáß" :
        await msg.reply("Please choose your location",reply_markup=first_english)

    if msg.text == "I'm in Ukraine nowüá∫üá¶":
        await msg.reply("How can I help you?",reply_markup=ukraine_english)

    if msg.text == "Back to services":
        await msg.reply("How can I help you?",reply_markup=ukraine_english)

    if msg.text == 'Change region':
        await msg.reply('Please choose your location', reply_markup=first_english)
    if msg.text=="–ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ–æ–Ω":
        await msg.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è",reply_markup=first_ua)
    if msg.text=="I'm refugee in EUüá™üá∫":
        await msg.reply("In which country are you now?",reply_markup=eu_english_countries)
    if msg.text=="–ë—ñ–∂–µ–Ω–µ—Ü—å –≤ –Ñ–° üá™üá∫":
        await msg.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è",reply_markup=eu_ua_countries)


    if msg.text == "Air raid map":
        browser = webdriver.Chrome(executable_path=r'C://chromedriver.exe')
        print("CHECKDRIVER")
        browser.get("https://vadimklimenko.com/map/")
        print("CHECKBROWSER")
        time.sleep(1)
        browser.save_screenshot("screenshot.png")
        await bot.send_photo(chat_id=msg.chat.id, photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/screenshot.png', 'rb'))
        await msg.reply(text="Air raid alert map\nRed areas are under bombing now",reply_markup=ukraine_english)
    if msg.text=="First Aid Help":
        await msg.reply('What is your problem', reply_markup=first_aid.medhelp2)
    if msg.text=="Border crossings":
        await msg.reply('Select from list',reply_markup=border_cross.bordercross)
    if msg.text=="Mental Health support":
        await msg.reply(reply_markup=mental.q0)

    if msg.text=="Refugee in Hungaryüá≠üá∫":
        await msg.reply(""" ‚ÄºÔ∏èHOTLINE\n   Toll-free number to call from Hungary: 06 80 310 310\n
    Toll-free number to call from Ukraine: 0 800 504 546\n
    Email: menekultinfo@me.gov.hu""",reply_markup=hu_english)


    if msg.text=="Accommodation":
        await msg.reply(text=huhelp.en_acc,reply_markup=hu_english)
    if msg.text=="Phone and SIM":
        await msg.reply(text=huhelp.en_sim,reply_markup=hu_english)
    if msg.text=="Medical help":
        await msg.reply(text=huhelp.en_med,reply_markup=hu_english)
    if msg.text=="Food and supply":
        await msg.reply(text=huhelp.en_food,reply_markup=hu_english)

    if msg.text=="Refugee in Czech Republicüá®üáø":
        await msg.reply("Section is under construction...", reply_markup=first_english)
    if msg.text=="Refugee in Polandüáµüá±":
        await msg.reply("Section under construction...", reply_markup=first_english)


    if msg.text == "–ë—ñ–∂–µ–Ω–µ—Ü—å –≤ –£–≥–æ—Ä—â–∏–Ω—ñüá≠üá∫":
        await msg.reply(""" ‚ÄºÔ∏è–£–≥–æ—Ä—Å—å–∫–∏–π —É—Ä—è–¥ –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –∑–µ–ª–µ–Ω—É –ª—ñ–Ω—ñ—é 24/7, –¥–µ –∫–æ–∂–µ–Ω –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —á–∏ —É–≥–æ—Ä—Å—å–∫–æ—é –º–æ–≤–∞–º–∏.\n
–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑ –£–≥–æ—Ä—â–∏–Ω–∏: 06 80 310 310\n
–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑ –£–∫—Ä–∞—ó–Ω–∏: 0 800 504 546\n
Email: menekultinfo@me.gov.hu""", reply_markup=hu_ua)
    if msg.text=="–ñ–∏—Ç–ª–æ":
        await msg.reply(text=huhelp.ua_acc,reply_markup=hu_ua)
    if msg.text=="–¢–µ–ª–µ—Ñ–æ–Ω, SIM-–∫–∞—Ä—Ç–∞, WiFi":
        await msg.reply(text=huhelp.ua_sim,reply_markup=hu_ua)
    if msg.text=="–ú–µ–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞":
        await msg.reply(text=huhelp.ua_med,reply_markup=hu_ua)
    if msg.text=="–•–∞—Ä—á—É–≤–∞–Ω–Ω—è":
        await msg.reply(text=huhelp.ua_food,reply_markup=hu_ua)


    if msg.text == "–ë—ñ–∂–µ–Ω–µ—Ü—å —É –ß–µ—Ö—ñ—óüá®üáø":
        await msg.reply("–†–æ–∑–¥—ñ–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–¥—ñ—ó –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞", reply_markup=first_ua)
    if msg.text == "–ë—ñ–∂–µ–Ω–µ—Ü—å —É –ü–æ–ª—å—â—ñüáµüá±":
        await msg.reply("–†–æ–∑–¥—ñ–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–¥—ñ—ó –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞", reply_markup=first_ua)

    if msg.text=="Ukrainianüá∫üá¶":
        await msg.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è",reply_markup=first_ua)


    if msg.text=="–ó–∞—Ä–∞–∑ –≤ –£–∫—Ä–∞—ó–Ω—ñ üá∫üá¶":
        await msg.reply(text="–Ø–∫ —è –º–æ–∂—É —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏",reply_markup=ukraine_ua)
    if msg.text=="–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö –Ω–∞–ª—å–æ—Ç—ñ–≤":
        browser = webdriver.Chrome(executable_path=r'C://chromedriver.exe')
        browser.get("https://vadimklimenko.com/map/")
        time.sleep(1)
        browser.save_screenshot("screenshot.png")
        await bot.send_photo(chat_id=msg.chat.id,photo=open('C:/Users/–ù—É—Ä–∂–∞–Ω/PycharmProjects/pythonProject1/screenshot.png', 'rb'))
        await msg.reply(text="–ö–∞—Ä—Ç–∞ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ –Ω–∞–ª—å–æ—Ç–∏ ", reply_markup=ukraine_ua)
    if msg.text=="–î–æ–ø–æ–º–æ–≥–∞ –ø–µ—Ä—à–æ—ó –¥–æ–ø–æ–º–æ–≥–∏":
        await msg.reply('What is your problem', reply_markup=first_aid.medhelpua)
    if msg.text=="–ü—Ä–∏–∫–æ—Ä–¥–æ–Ω–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏":
        await msg.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É', reply_markup=border_cross.bordercrossu)

if __name__ == '__main__':
    executor.start_polling(dp)
